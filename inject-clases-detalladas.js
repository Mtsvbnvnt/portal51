// Script para inyectar clases detalladas y materiales a cursos existentes
// Ejecutar con: mongosh portal50 inject-clases-detalladas.js

print("üéì Iniciando inyecci√≥n de clases detalladas...");

// Primero verificamos si hay cursos existentes
const cursosExistentes = db.cursos.find({}).toArray();

if (cursosExistentes.length === 0) {
  print("‚ùå No hay cursos en la base de datos.");
  print("üí° Primero ejecuta inject-cursos.js para crear cursos.");
  exit();
}

print(`‚úÖ Encontrados ${cursosExistentes.length} cursos existentes`);

// Funci√≥n para generar clases seg√∫n la categor√≠a del curso
function generarClasesPorCategoria(curso) {
  const clasesBase = [];
  
  switch (curso.categoria) {
    case "Programaci√≥n":
      if (curso.titulo.includes("React")) {
        clasesBase.push(
          {
            numeroClase: 1,
            titulo: "Introducci√≥n a React y JSX",
            descripcion: "Conceptos fundamentales de React, componentes funcionales, JSX y estructura b√°sica de una aplicaci√≥n.",
            duracionMinutos: 90,
            objetivos: [
              "Entender qu√© es React y sus ventajas",
              "Configurar el entorno de desarrollo",
              "Crear primeros componentes con JSX",
              "Comprender el Virtual DOM"
            ],
            materialesAdicionales: [
              { nombre: "Gu√≠a de instalaci√≥n React", url: "#", tipo: "pdf" },
              { nombre: "Documentaci√≥n oficial React", url: "https://react.dev/", tipo: "link" },
              { nombre: "C√≥digos de ejemplo", url: "#", tipo: "archivo" }
            ]
          },
          {
            numeroClase: 2,
            titulo: "Estados y Props",
            descripcion: "Manejo de estados locales con useState, comunicaci√≥n entre componentes mediante props y lifting state up.",
            duracionMinutos: 90,
            objetivos: [
              "Manejar estado local con useState",
              "Pasar datos entre componentes con props",
              "Implementar lifting state up",
              "Manejar eventos en React"
            ],
            prerequisitos: ["Clase 1: Introducci√≥n a React"],
            materialesAdicionales: [
              { nombre: "Ejercicios de Estado y Props", url: "#", tipo: "pdf" },
              { nombre: "Proyecto: Lista de Tareas", url: "#", tipo: "archivo" }
            ]
          },
          {
            numeroClase: 3,
            titulo: "Hooks Avanzados",
            descripcion: "useEffect, useContext, useReducer y custom hooks. Manejo de efectos secundarios y optimizaci√≥n.",
            duracionMinutos: 90,
            objetivos: [
              "Dominar useEffect y ciclos de vida",
              "Implementar useContext para estado global",
              "Crear custom hooks reutilizables",
              "Optimizar rendimiento con useMemo y useCallback"
            ],
            prerequisitos: ["Clase 2: Estados y Props"],
            materialesAdicionales: [
              { nombre: "Gu√≠a de Hooks", url: "#", tipo: "pdf" },
              { nombre: "Patrones de Custom Hooks", url: "#", tipo: "pdf" }
            ]
          },
          {
            numeroClase: 4,
            titulo: "Proyecto Final: Aplicaci√≥n Completa",
            descripcion: "Desarrollo de una aplicaci√≥n completa integrando todos los conceptos aprendidos.",
            duracionMinutos: 120,
            objetivos: [
              "Integrar todos los conceptos de React",
              "Implementar routing con React Router",
              "Conectar con APIs externas",
              "Desplegar la aplicaci√≥n"
            ],
            prerequisitos: ["Clase 3: Hooks Avanzados"],
            materialesAdicionales: [
              { nombre: "Especificaciones del Proyecto", url: "#", tipo: "pdf" },
              { nombre: "API de ejemplo", url: "https://jsonplaceholder.typicode.com/", tipo: "link" },
              { nombre: "Gu√≠a de despliegue", url: "#", tipo: "pdf" }
            ]
          }
        );
      }
      break;

    case "Marketing":
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Fundamentos del Marketing Digital",
          descripcion: "Conceptos b√°sicos, ecosistema digital, customer journey y m√©tricas clave.",
          duracionMinutos: 60,
          objetivos: [
            "Comprender el ecosistema del marketing digital",
            "Identificar el customer journey",
            "Definir KPIs y m√©tricas importantes",
            "Crear buyer personas"
          ],
          materialesAdicionales: [
            { nombre: "Template Buyer Persona", url: "#", tipo: "pdf" },
            { nombre: "Gu√≠a de KPIs", url: "#", tipo: "pdf" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "Estrategias en Redes Sociales",
          descripcion: "Creaci√≥n de contenido, manejo de comunidades, publicidad en Facebook e Instagram.",
          duracionMinutos: 60,
          objetivos: [
            "Desarrollar estrategia de contenido",
            "Optimizar perfiles en redes sociales",
            "Crear campa√±as publicitarias efectivas",
            "Analizar m√©tricas de engagement"
          ],
          prerequisitos: ["Clase 1: Fundamentos del Marketing Digital"],
          materialesAdicionales: [
            { nombre: "Calendario de contenido", url: "#", tipo: "pdf" },
            { nombre: "Herramientas de dise√±o gratuitas", url: "https://canva.com", tipo: "link" }
          ]
        },
        {
          numeroClase: 3,
          titulo: "SEO y Marketing de Contenidos",
          descripcion: "Optimizaci√≥n para motores de b√∫squeda, estrategia de contenidos y blogging.",
          duracionMinutos: 60,
          objetivos: [
            "Implementar SEO on-page y off-page",
            "Crear estrategia de contenidos",
            "Usar herramientas de keyword research",
            "Medir resultados org√°nicos"
          ],
          prerequisitos: ["Clase 2: Estrategias en Redes Sociales"],
          materialesAdicionales: [
            { nombre: "Checklist SEO", url: "#", tipo: "pdf" },
            { nombre: "Google Keyword Planner", url: "https://ads.google.com/", tipo: "link" }
          ]
        },
        {
          numeroClase: 4,
          titulo: "Email Marketing y Automatizaci√≥n",
          descripcion: "Campa√±as de email, segmentaci√≥n, automatizaci√≥n y an√°lisis de resultados.",
          duracionMinutos: 60,
          objetivos: [
            "Dise√±ar campa√±as de email efectivas",
            "Implementar automatizaci√≥n de marketing",
            "Segmentar audiencias",
            "Analizar m√©tricas de email marketing"
          ],
          prerequisitos: ["Clase 3: SEO y Marketing de Contenidos"],
          materialesAdicionales: [
            { nombre: "Templates de Email", url: "#", tipo: "pdf" },
            { nombre: "Gu√≠a de Mailchimp", url: "#", tipo: "pdf" }
          ]
        }
      );
      break;

    case "Data Science":
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Introducci√≥n a Python para An√°lisis",
          descripcion: "Configuraci√≥n del entorno, pandas b√°sico, numpy y primeros an√°lisis exploratorios.",
          duracionMinutos: 120,
          objetivos: [
            "Configurar entorno Python para data science",
            "Dominar pandas para manipulaci√≥n de datos",
            "Usar numpy para operaciones num√©ricas",
            "Realizar an√°lisis exploratorio b√°sico"
          ],
          materialesAdicionales: [
            { nombre: "Dataset de pr√°ctica", url: "#", tipo: "archivo" },
            { nombre: "Cheat sheet pandas", url: "#", tipo: "pdf" },
            { nombre: "Jupyter Notebook templates", url: "#", tipo: "archivo" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "Visualizaci√≥n de Datos",
          descripcion: "Matplotlib, seaborn y plotly. Creaci√≥n de gr√°ficos efectivos y dashboards.",
          duracionMinutos: 120,
          objetivos: [
            "Crear visualizaciones con matplotlib",
            "Usar seaborn para gr√°ficos estad√≠sticos",
            "Desarrollar dashboards interactivos",
            "Aplicar principios de visualizaci√≥n efectiva"
          ],
          prerequisitos: ["Clase 1: Introducci√≥n a Python"],
          materialesAdicionales: [
            { nombre: "Galer√≠a de gr√°ficos", url: "#", tipo: "pdf" },
            { nombre: "Paletas de colores", url: "#", tipo: "pdf" }
          ]
        },
        {
          numeroClase: 3,
          titulo: "An√°lisis Estad√≠stico Avanzado",
          descripcion: "Estad√≠stica descriptiva, correlaciones, regresiones y pruebas de hip√≥tesis.",
          duracionMinutos: 120,
          objetivos: [
            "Realizar an√°lisis estad√≠stico descriptivo",
            "Implementar regresiones lineales y log√≠sticas",
            "Ejecutar pruebas de hip√≥tesis",
            "Interpretar resultados estad√≠sticos"
          ],
          prerequisitos: ["Clase 2: Visualizaci√≥n de Datos"],
          materialesAdicionales: [
            { nombre: "Formulario estad√≠stico", url: "#", tipo: "pdf" },
            { nombre: "Casos de estudio", url: "#", tipo: "archivo" }
          ]
        }
      );
      break;

    case "Gesti√≥n":
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Introducci√≥n a Metodolog√≠as √Ågiles",
          descripcion: "Historia y principios √°giles, diferencias con metodolog√≠as tradicionales.",
          duracionMinutos: 75,
          objetivos: [
            "Comprender los principios √°giles",
            "Identificar cu√°ndo usar metodolog√≠as √°giles",
            "Conocer el Manifiesto √Ågil",
            "Comparar enfoques tradicionales vs √°giles"
          ],
          materialesAdicionales: [
            { nombre: "Manifiesto √Ågil", url: "https://agilemanifesto.org/", tipo: "link" },
            { nombre: "Comparativa metodolog√≠as", url: "#", tipo: "pdf" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "Framework Scrum",
          descripcion: "Roles, eventos y artefactos de Scrum. Implementaci√≥n pr√°ctica.",
          duracionMinutos: 75,
          objetivos: [
            "Dominar roles de Scrum",
            "Facilitar ceremonias de Scrum",
            "Gestionar product backlog",
            "Planificar sprints efectivos"
          ],
          prerequisitos: ["Clase 1: Introducci√≥n a Metodolog√≠as √Ågiles"],
          materialesAdicionales: [
            { nombre: "Scrum Guide", url: "#", tipo: "pdf" },
            { nombre: "Templates de Scrum", url: "#", tipo: "archivo" }
          ]
        },
        {
          numeroClase: 3,
          titulo: "Kanban y Lean",
          descripcion: "Principios de Kanban, visualizaci√≥n del flujo de trabajo y mejora continua.",
          duracionMinutos: 75,
          objetivos: [
            "Implementar tableros Kanban",
            "Medir y optimizar flujo de trabajo",
            "Aplicar principios Lean",
            "Identificar desperdicios en procesos"
          ],
          prerequisitos: ["Clase 2: Framework Scrum"],
          materialesAdicionales: [
            { nombre: "Template tablero Kanban", url: "#", tipo: "archivo" },
            { nombre: "M√©tricas Kanban", url: "#", tipo: "pdf" }
          ]
        }
      );
      break;

    case "Idiomas":
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Business English Fundamentals",
          descripcion: "Vocabulario b√°sico de negocios, presentaciones personales y networking.",
          duracionMinutos: 60,
          objetivos: [
            "Dominar vocabulario de negocios esencial",
            "Realizar presentaciones personales efectivas",
            "Participar en conversaciones de networking",
            "Usar phrasal verbs comunes en negocios"
          ],
          materialesAdicionales: [
            { nombre: "Business Vocabulary List", url: "#", tipo: "pdf" },
            { nombre: "Audio ejercicios pronunciaci√≥n", url: "#", tipo: "archivo" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "Meetings and Presentations",
          descripcion: "Participaci√≥n en reuniones, presentaciones formales y manejo de Q&A.",
          duracionMinutos: 60,
          objetivos: [
            "Participar activamente en meetings",
            "Estructurar presentaciones profesionales",
            "Manejar preguntas y respuestas",
            "Usar lenguaje formal apropiado"
          ],
          prerequisitos: ["Clase 1: Business English Fundamentals"],
          materialesAdicionales: [
            { nombre: "Meeting phrases", url: "#", tipo: "pdf" },
            { nombre: "Presentation templates", url: "#", tipo: "archivo" }
          ]
        },
        {
          numeroClase: 3,
          titulo: "Email Communication",
          descripcion: "Redacci√≥n de emails profesionales, negociaci√≥n por escrito y etiqueta digital.",
          duracionMinutos: 60,
          objetivos: [
            "Redactar emails profesionales efectivos",
            "Usar tono apropiado seg√∫n el contexto",
            "Negociar por escrito",
            "Seguir etiqueta de comunicaci√≥n digital"
          ],
          prerequisitos: ["Clase 2: Meetings and Presentations"],
          materialesAdicionales: [
            { nombre: "Email templates", url: "#", tipo: "pdf" },
            { nombre: "Business writing guide", url: "#", tipo: "pdf" }
          ]
        }
      );
      break;

    case "Dise√±o":
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Fundamentos de UX Design",
          descripcion: "Principios de experiencia de usuario, research y persona development.",
          duracionMinutos: 90,
          objetivos: [
            "Comprender principios de UX",
            "Realizar research de usuarios",
            "Crear user personas",
            "Desarrollar user journey maps"
          ],
          materialesAdicionales: [
            { nombre: "UX Research toolkit", url: "#", tipo: "pdf" },
            { nombre: "Persona templates", url: "#", tipo: "archivo" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "UI Design y Sistemas de Dise√±o",
          descripcion: "Principios de interfaz, tipograf√≠a, color y creaci√≥n de design systems.",
          duracionMinutos: 90,
          objetivos: [
            "Aplicar principios de UI design",
            "Crear paletas de colores efectivas",
            "Establecer jerarqu√≠as tipogr√°ficas",
            "Desarrollar design systems"
          ],
          prerequisitos: ["Clase 1: Fundamentos de UX Design"],
          materialesAdicionales: [
            { nombre: "Color theory guide", url: "#", tipo: "pdf" },
            { nombre: "Typography handbook", url: "#", tipo: "pdf" }
          ]
        },
        {
          numeroClase: 3,
          titulo: "Prototipado con Figma",
          descripcion: "Herramientas de Figma, wireframing, prototipado interactivo y testing.",
          duracionMinutos: 90,
          objetivos: [
            "Dominar herramientas de Figma",
            "Crear wireframes y mockups",
            "Desarrollar prototipos interactivos",
            "Realizar testing con usuarios"
          ],
          prerequisitos: ["Clase 2: UI Design y Sistemas de Dise√±o"],
          materialesAdicionales: [
            { nombre: "Figma starter kit", url: "#", tipo: "archivo" },
            { nombre: "Usability testing guide", url: "#", tipo: "pdf" }
          ]
        }
      );
      break;

    default:
      // Clases gen√©ricas para categor√≠as no especificadas
      clasesBase.push(
        {
          numeroClase: 1,
          titulo: "Introducci√≥n al curso",
          descripcion: "Conceptos fundamentales y objetivos del curso.",
          duracionMinutos: curso.duracionMinutos || 60,
          objetivos: ["Comprender los fundamentos", "Establecer objetivos de aprendizaje"],
          materialesAdicionales: [
            { nombre: "Material introductorio", url: "#", tipo: "pdf" }
          ]
        },
        {
          numeroClase: 2,
          titulo: "Desarrollo pr√°ctico",
          descripcion: "Aplicaci√≥n pr√°ctica de los conceptos aprendidos.",
          duracionMinutos: curso.duracionMinutos || 60,
          objetivos: ["Aplicar conceptos en pr√°ctica", "Desarrollar habilidades espec√≠ficas"],
          prerequisitos: ["Clase 1: Introducci√≥n al curso"],
          materialesAdicionales: [
            { nombre: "Ejercicios pr√°cticos", url: "#", tipo: "pdf" }
          ]
        }
      );
  }

  return clasesBase.map((clase, index) => ({
    ...clase,
    cursoId: curso._id,
    orden: index + 1,
    activa: true,
    creadoEn: new Date(),
    actualizadoEn: new Date()
  }));
}

// Procesar cada curso existente
let totalClasesCreadas = 0;
const cursosActualizados = [];

for (const curso of cursosExistentes) {
  print(`\nüìö Procesando curso: "${curso.titulo}"`);
  
  // Verificar si ya tiene clases
  const clasesExistentes = db.clases.find({ cursoId: curso._id }).count();
  
  if (clasesExistentes > 0) {
    print(`   ‚ö†Ô∏è  Ya tiene ${clasesExistentes} clases, saltando...`);
    continue;
  }
  
  // Generar clases para este curso
  const nuevasClases = generarClasesPorCategoria(curso);
  
  try {
    // Insertar las clases
    if (nuevasClases.length > 0) {
      const resultClases = db.clases.insertMany(nuevasClases);
      print(`   ‚úÖ ${resultClases.insertedIds.length} clases creadas`);
      totalClasesCreadas += resultClases.insertedIds.length;
      
      // Actualizar el curso con el n√∫mero total de clases
      db.cursos.updateOne(
        { _id: curso._id },
        { 
          $set: { 
            totalClases: nuevasClases.length,
            clases: Object.values(resultClases.insertedIds)
          }
        }
      );
      
      cursosActualizados.push({
        titulo: curso.titulo,
        categoria: curso.categoria,
        clasesCreadas: nuevasClases.length
      });
    }
  } catch (error) {
    print(`   ‚ùå Error creando clases para "${curso.titulo}": ${error.message}`);
  }
}

// Mostrar resumen final
print(`\nüìä RESUMEN DE LA INYECCI√ìN:`);
print(`   Total de clases creadas: ${totalClasesCreadas}`);
print(`   Cursos actualizados: ${cursosActualizados.length}`);
print(`\nüìã Detalle por curso:`);

cursosActualizados.forEach(curso => {
  print(`   ‚Ä¢ ${curso.titulo} (${curso.categoria}): ${curso.clasesCreadas} clases`);
});

// Estad√≠sticas finales
const estadisticasFinales = db.clases.aggregate([
  {
    $lookup: {
      from: "cursos",
      localField: "cursoId",
      foreignField: "_id",
      as: "curso"
    }
  },
  { $unwind: "$curso" },
  {
    $group: {
      _id: "$curso.categoria",
      totalClases: { $sum: 1 },
      cursos: { $addToSet: "$curso.titulo" }
    }
  },
  { $sort: { totalClases: -1 } }
]).toArray();

print(`\nüìà Estad√≠sticas por categor√≠a:`);
estadisticasFinales.forEach(stat => {
  print(`   ${stat._id}: ${stat.totalClases} clases en ${stat.cursos.length} cursos`);
});

print(`\nüéâ ¬°Inyecci√≥n de clases completada exitosamente!`);
print(`\nüí° Pr√≥ximos pasos:`);
print(`   1. Actualiza el backend para incluir endpoints de clases`);
print(`   2. Modifica el frontend para mostrar las clases en CursoDetalle`);
print(`   3. Implementa la funcionalidad de materiales descargables`);
